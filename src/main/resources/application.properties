# Environment (lowercase)
environment = r1qa

#domain must be fully qualified
ad.url=ldap://health.hin.sk.ca:389
ad.domain=health.hin.sk.ca

# Database Connection
#datasource_url = ${environment}_database_url
#datasource_username = ${environment}_database_username
#datasource_password = ${environment}_database_password

r1qa.datasource.url = jdbc:oracle:thin:@r1q-v-1320.ehealthsask.ca:1523:EHRR1QA
r1qa.datasource.username = HIALAPP
r1qa.datasource.password = hialapp

efq.datasource.url = jdbc:oracle:thin:@efq-rac1-prs.ehealthsask.ca:1521/ehrefq
efq.datasource.username = HIALAPP
efq.datasource.password = hialapp

spring.jpa.hibernate.naming-strategy=de.schauderhaft.hibernate.OracleNamingStrategy
#spring.jpa.hibernate.naming.strategy=de.schauderhaft.hibernate.OracleNamingStrategy

# ===============================
# = OTHER DEV STUFF
# ===============================
spring.thymeleaf.cache=false

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Let Spring autodetect the different SQL Dialects of each datasource
spring.jpa.database=default
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
#spring.jpa.database-platform=org.hibernate.dialect.Oracle11gDialect

# HIAL and TR R1D
#spring.datasource.url = jdbc:mysql://localhost:3306/employees
spring.datasource.driver-class-name = oracle.jdbc.OracleDriver
spring.datasource.url = ${${environment}.datasource.url}
spring.datasource.username = ${${environment}.datasource.username}
spring.datasource.password = ${${environment}.datasource.password}


# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1


#spring.datasource.driverClassName=com.mysql.jdbc.Driver
server.port=8081


#spring.datasource.url = jdbc:oracle:thin:@r1q-v-1320.ehealthsask.ca:1523:ehrr1qa
#spring.datasource.username = HIALAPP
#spring.datasource.password = hialapp





# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = none

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
